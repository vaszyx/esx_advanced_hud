/* Minimal gsap.to implementation for rs_hud animations. */
(function (global) {
  'use strict';

  function animate(target, props, duration, onComplete) {
    if (!target || !props) return;
    var computed = getComputedStyle(target);
    var startValues = {};
    var endValues = {};
    Object.keys(props).forEach(function (key) {
      startValues[key] = parseFloat(computed[key]) || 0;
      endValues[key] = typeof props[key] === 'number' ? props[key] : parseFloat(props[key]) || 0;
    });

    if (duration <= 0) {
      Object.keys(endValues).forEach(function (key) {
        target.style[key] = String(endValues[key]);
      });
      if (typeof onComplete === 'function') onComplete();
      return;
    }

    var startTime = performance.now();

    function step(now) {
      var progress = Math.min(1, (now - startTime) / duration);
      Object.keys(endValues).forEach(function (key) {
        var value = startValues[key] + (endValues[key] - startValues[key]) * progress;
        target.style[key] = String(value);
      });
      if (progress < 1) {
        requestAnimationFrame(step);
      } else if (typeof onComplete === 'function') {
        onComplete();
      }
    }

    requestAnimationFrame(step);
  }

  global.gsap = {
    to: function (target, vars) {
      vars = vars || {};
      var duration = (vars.duration || 0) * 1000;
      var onComplete = vars.onComplete;
      var props = {};
      Object.keys(vars).forEach(function (key) {
        if (key === 'duration' || key === 'delay' || key === 'overwrite' || key === 'ease' || key === 'onComplete') {
          return;
        }
        props[key] = vars[key];
      });
      animate(target, props, duration, onComplete);
    }
  };
})(window);
