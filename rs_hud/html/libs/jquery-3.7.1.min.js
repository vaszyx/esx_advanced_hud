/* Minimal subset of jQuery 3.7.1 API used by rs_hud. */
(function (global) {
  'use strict';

  var dataStore = new WeakMap();

  function MiniQuery(elements) {
    this.length = elements.length;
    for (var i = 0; i < elements.length; i++) {
      this[i] = elements[i];
    }
  }

  MiniQuery.prototype.each = function (fn) {
    for (var i = 0; i < this.length; i++) {
      fn.call(this[i], i, this[i]);
    }
    return this;
  };

  MiniQuery.prototype.addClass = function (cls) {
    return this.each(function () {
      this.classList.add(cls);
    });
  };

  MiniQuery.prototype.removeClass = function (cls) {
    return this.each(function () {
      this.classList.remove(cls);
    });
  };

  MiniQuery.prototype.toggleClass = function (cls, state) {
    return this.each(function () {
      if (state === undefined) {
        this.classList.toggle(cls);
      } else if (state) {
        this.classList.add(cls);
      } else {
        this.classList.remove(cls);
      }
    });
  };

  MiniQuery.prototype.text = function (value) {
    if (value === undefined) {
      return this.length ? this[0].textContent : undefined;
    }
    return this.each(function () {
      this.textContent = value;
    });
  };

  MiniQuery.prototype.css = function (prop, value) {
    if (value === undefined) {
      if (typeof prop === 'string') {
        return this.length ? getComputedStyle(this[0])[prop] : undefined;
      }
      var styles = prop || {};
      return this.each(function () {
        for (var key in styles) {
          if (Object.prototype.hasOwnProperty.call(styles, key)) {
            this.style[key] = styles[key];
          }
        }
      });
    }
    return this.each(function () {
      this.style[prop] = value;
    });
  };

  MiniQuery.prototype.data = function (key, value) {
    if (!this.length) return value === undefined ? undefined : this;
    var store = dataStore.get(this[0]);
    if (!store) {
      store = {};
      dataStore.set(this[0], store);
    }
    if (value === undefined) {
      return store[key];
    }
    store[key] = value;
    return this;
  };

  MiniQuery.prototype.on = function (eventName, handler) {
    return this.each(function () {
      this.addEventListener(eventName, handler);
    });
  };

  MiniQuery.prototype.remove = function () {
    return this.each(function () {
      if (this.parentNode) {
        this.parentNode.removeChild(this);
      }
    });
  };

  function $(selector) {
    if (selector instanceof MiniQuery) {
      return selector;
    }

    var elements = [];
    if (typeof selector === 'string') {
      if (selector[0] === '#') {
        var el = document.getElementById(selector.slice(1));
        if (el) elements.push(el);
      } else {
        elements = Array.prototype.slice.call(document.querySelectorAll(selector));
      }
    } else if (selector instanceof Element || selector === window || selector === document) {
      elements = [selector];
    } else if (selector && typeof selector.length === 'number') {
      for (var i = 0; i < selector.length; i++) {
        var node = selector[i];
        if (node instanceof Element) {
          elements.push(node);
        }
      }
    }

    return new MiniQuery(elements);
  }

  $.fn = MiniQuery.prototype;
  $.ready = function (callback) {
    if (document.readyState !== 'loading') {
      callback();
    } else {
      document.addEventListener('DOMContentLoaded', callback);
    }
  };

  global.$ = global.jQuery = $;
})(window);
